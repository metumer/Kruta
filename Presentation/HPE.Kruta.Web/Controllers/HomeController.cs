using HPE.Kruta.DataAccess;
using HPE.Kruta.Model;
using HPE.Kruta.Web.Models;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Linq;
using System.Web.Mvc;
using Trirand.Web.Mvc;

namespace HPE.Kruta.Web.Controllers
{
    public class HomeController : Controller
    {
        private ModelDBContext _db = new ModelDBContext();

        [Authorize]
        public ActionResult Index()
        {
            JqGridModel jqGridModel = new Models.JqGridModel();

            Uri baseUrl = new Uri(Request.Url, Url.Content("~"));
            jqGridModel.JQGridSample.DataUrl = $"{baseUrl}Home/JQGridSample_DataRequested";

            return View(jqGridModel);
        }

        public ActionResult Queues_Read([DataSourceRequest]DataSourceRequest request)
        {
            IQueryable<vDocumentQueue> vdocumentqueues = _db.vDocumentQueues;
            DataSourceResult result = vdocumentqueues.ToDataSourceResult(request);

            return Json(result);
        }

        // This method is called when the grid requests data. You can choose any method to call
        // by setting the JQGrid.DataUrl property
        public JsonResult JQGridSample_DataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new JqGridModel();
            gridModel.JQGridSample.ColumnReordering = true;
            SetUpGrid(gridModel.JQGridSample);
            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.JQGridSample.DataBind(_db.vDocumentQueues);
        }

        // This is the default action for the View. Use it to setup your grid Model.
        public ActionResult PerformanceLinqSearch()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new JqGridModel();
            var ordersGrid = gridModel.JQGridSample;

            // Setting the DataUrl to an action (method) in the controller is required.
            // This action will return the data needed by the grid
            ordersGrid.DataUrl = Url.Action("SearchGridDataRequested");

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            SetUpGrid(ordersGrid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        private void SetUpGrid(JQGrid jqGridSample)
        {
            var orderDateColumn = jqGridSample.Columns.Find(c => c.DataField == "ReceivedDateTime");
            orderDateColumn.DataFormatString = "{0:yyyy/MM/dd}";
            orderDateColumn.SearchType = SearchType.DatePicker;
            orderDateColumn.DataType = typeof(DateTime);
            orderDateColumn.SearchControlID = "DatePicker";
            orderDateColumn.SearchToolBarOperation = SearchOperation.IsEqualTo;

            var shipNameColumn = jqGridSample.Columns.Find(c => c.DataField == "EmployeeName");
            shipNameColumn.SearchType = SearchType.AutoComplete;
            shipNameColumn.DataType = typeof(string);
            shipNameColumn.SearchControlID = "AutoComplete";
            shipNameColumn.SearchToolBarOperation = SearchOperation.BeginsWith;
            shipNameColumn.ClearSearch = false;

            var orderIDColumns = jqGridSample.Columns.Find(c => c.DataField == "QueneID");
            orderIDColumns.Searchable = true;
            orderIDColumns.DataType = typeof(int);
            orderIDColumns.SearchToolBarOperation = SearchOperation.IsEqualTo;

            //Uri baseUrl = new Uri(Request.Url, Url.Content("~"));
            //jqGridSample.DataUrl = $"{baseUrl}JQGridSample_DataRequested";

            SetUpParcelNumberSearchDropDown(jqGridSample);
        }

        public JsonResult AutoCompleteEmployeeName(string term)
        {
            JQAutoComplete autoComplete = new JQAutoComplete();

            autoComplete.DataField = "EmployeeName";
            autoComplete.AutoCompleteMode = AutoCompleteMode.BeginsWith;
            autoComplete.DataSource = _db.vDocumentQueues.Select(s => s.EmployeeName);
            return autoComplete.DataBind();
        }

        private void SetUpParcelNumberSearchDropDown(JQGrid ordersGrid)
        {
            // setup the grid search criteria for the columns
            JQGridColumn customersColumn = ordersGrid.Columns.Find(c => c.DataField == "ParcelNumber");
            customersColumn.Searchable = true;

            // DataType must be set in order to use searching
            customersColumn.DataType = typeof(string);
            customersColumn.SearchToolBarOperation = SearchOperation.IsEqualTo;
            customersColumn.SearchType = SearchType.DropDown;

            // Populate the search dropdown only on initial request, in order to optimize performance
            if (ordersGrid.AjaxCallBackMode == AjaxCallBackMode.RequestData)
            {
                var searchList = from vDoc in _db.vDocumentQueues
                                 select new SelectListItem
                                 {
                                     Text = vDoc.ParcelNumber,
                                     Value = vDoc.ParcelNumber
                                 };

                customersColumn.SearchList = searchList.ToList<SelectListItem>();
                customersColumn.SearchList.Insert(0, new SelectListItem { Text = "All", Value = "" });
            }
        }

        // This method is called when the grid requests data        
        public JsonResult SearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new JqGridModel();

            // customize the default Orders grid model with our custom settings
            SetUpGrid(gridModel.JQGridSample);

            JQGridState gridState = gridModel.JQGridSample.GetState();
            Session["gridState"] = gridState;
            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            
            return gridModel.JQGridSample.DataBind(_db.vDocumentQueues);
        }

        protected override void Dispose(bool disposing)
        {
            _db.Dispose();
            base.Dispose(disposing);
        }
    }
}